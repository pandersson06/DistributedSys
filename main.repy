
# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------  
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port) + "\n"
  while True:
    try: 
      listencommhandle = waitforconn(ip,port,board)
    except Exception, e:
      print "Exception in start_board: %s, %s\n" %(type(e), e)
      print "Will try again"

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    # React depending on message type: GET, POST, VESSELDATA, 
    # or some other type of communication.
    if msgheader.startswith( 'GET' ):
      generate_and_send_html_page(sockobj)
      stopcomm(thiscommhandle)   

    elif msgheader.startswith( 'POST' ):
      print "got POST %s" %(msgheader)
      newEntry =  msgheader[msgheader.find('comment=')+8:]
      
      # Updates logic clock and entry list
      mycontext['lock'].acquire(True)
      mycontext['logicclock'] += 1
      tmpclock = mycontext['logicclock']
      mycontext['entry'].append((newEntry, mycontext['logicclock'], int(mycontext['ip'].replace('.', '')), mycontext['port'] ))
      mycontext['lock'].release()

      # Generate and send html page to client
      generate_and_send_html_page(sockobj)
      stopcomm(thiscommhandle)
      
      # Send new entry to other vessels
      send_vessel_data(newEntry, tmpclock) 
   
    elif msgheader.startswith( 'VESSELDATA' ):
      print "got VESSELDATA from IP:%s got:%s" %(ip, msgheader)
      stopcomm(thiscommhandle)

      # First element is entry, second element is logic clock, third elemet is the 
      # ip and fourth element is the port. Converts some string elements to int
      msg = msgheader[msgheader.find('comment=')+8:].split('+')
      msg[1] = int(msg[1])
      msg.insert(2, int(ip.replace('.', '')))
      msg[3] = int(msg[3])  

      # Acquires lock and updates logic clock
      mycontext['lock'].acquire(True)
      mycontext['logicclock'] = max(mycontext['logicclock'], msg[1])

      # Inserts the new entry
      insert_entry(msg)
        
      mycontext['lock'].release()

    else:
      print "got something:\n", msgheader
      stopcomm(thiscommhandle)
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)

# ------------------------------------------------------------------------------
# Inserts the new entry at correct location
# entry[1] and msg[1] is the Logic Clock
# entry[2] and msg[2] is the IP
# entry[3] and msg[3] is the Port
# ------------------------------------------------------------------------------ 
def insert_entry(msg):
  index = len(mycontext['entry'])-1
  while True:
    # Checks if msg should be inserted first in entry list
    if index == -1:
      mycontext['entry'].insert(0, (msg[0], msg[1], msg[2], msg[3]))
      return

    # Checks if msg should be inserted at index
    entry = mycontext['entry'][index]
    if (entry[1] < msg[1] or # If Logic Clock is larger
        (entry[1] == msg[1] and entry[2] < msg[2]) or # or if IP is larger
        (entry[1] == msg[1] and entry[2] == msg[2] and entry[3] < msg[3])): # or if Port is larger
      mycontext['entry'].insert(index+1, (msg[0], msg[1], msg[2], msg[3]))
      return
    index -= 1

# ------------------------------------------------------------------------------
# Sends new entry to all other vessels 
# ------------------------------------------------------------------------------   
def send_vessel_data(entry, logicclock):
  for (vesselip, vesselport) in mycontext['vessels']: # For each vessel
    if vesselip != mycontext['ip'] or vesselport != mycontext['port']:
      notsent = True # For special case when timed out execption arises
      while notsent:
        try:
          # Sends VESSELDATA to vessel
          sockobjVessel = openconn(vesselip, vesselport)
          bytesent = sockobjVessel.send('VESSELDATA\ncomment=' + entry + '+' + str(logicclock) + '+' + str(mycontext['port']))
          sockobjVessel.close()
          notsent = False
        except Exception, e:
          # Tries to send again if we got timed out exception, otherwise continues with next vessel
          if str(e) != 'Connection timed out!' and str(e) != 'Timed out checking for socket cleanup!':
            print "Exception in send_vessel_data: %s, %s\n" %(type(e), e)
            print "for IP: %s & Port: %s Continues with next vessel\n" %(vesselip, vesselport)
            notsent = False
          else:
            print "got timed out, trying again"
  return

# ------------------------------------------------------------------------------
# Generates the html page and sends it to client
# Optional parameters are message and error which are introduced as headers into the html.
# ------------------------------------------------------------------------------   
def generate_and_send_html_page(sockobj, status=""):
  # Sets blackboard, title, and status content
  content = '<div class="entry">'
  for (entry, clock, ip, port) in mycontext['entry'][::-1]: # Add entries in reverse order to content
    content += entry + '<br>'
  content += '</div>'
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))
  status_message = "<div class='status'>%s</div>" % (status)

  # Merging the contents of the blackboard, the title and the leader within a placeholder
  content = '<div id="boardcontents_placeholder">%s%s</div>' %(board_title, content)   

  # Merging the htmlfiles, status and blackboard content.
  content = "".join([mycontext['headerhtml'], status_message, content, mycontext['footerhtml']])

  # Sends the generated html
  sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
  "Content-length: %i\r\n\r\n%s" % (len(content), content))
  return

# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default main.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  # Initialize mycontext
  # Entry is made of by tuples which is structured like this (Blackboard entry, Logic Clock, Ip, Port)
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['vessels'] = [('195.113.161.84', 63163), ('129.32.84.160', 63163), ('131.179.150.70', 63163), ('128.10.18.52', 63163), ('156.56.250.227', 63163), ('139.80.206.133', 63163),  ('210.32.181.184', 63163), ('200.19.159.35', 63163),  ('128.220.231.2', 63163)]
  mycontext['entry'] = []
  mycontext['lock'] = getlock()
  mycontext['logicclock'] = 0
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  start_board()
