# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------  
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print("Listening on IP " + str(ip) +" port " + str(port) + "\n")
  while True:
    try: 
      listencommhandle = waitforconn(ip,port,board)
    except Exception, e:
      print "Exception in start_board: %s, %s\n" %(type(e), e)
      print "Will try again"
      #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    # React depending on message type: HTTP GET, or POST, or VESSELDATA,
    # or some other type of communication.
    if msgheader.startswith( 'GET' ):
      send_html(sockobj)
      stopcomm(thiscommhandle)   

    elif msgheader.startswith( 'POST' ):
      print "Vessel IP: %s Port: %s " %(mycontext['ip'], mycontext['port'])
      print "got POST:\n", msgheader
      send_html(sockobj)
      stopcomm(thiscommhandle)
      
      mycontext['lock'].acquire(True)
      acquire_distributed_lock()
      
      newentry = msgheader[msgheader.find('comment=')+8:] + '<br>'
      mycontext['entry'] = newentry + mycontext['entry']
      print("my current context" + mycontext['entry'])
      send_vessel_data(newentry)
      
      release_distributed_lock()
      mycontext['lock'].release()  
   
    elif msgheader.startswith( 'VESSELDATA' ):
      print "got VESSELDATA from IP:%s Port:%s got:%s" %(mycontext['ip'], mycontext['port'], msgheader)
      stopcomm(thiscommhandle)
      mycontext['entry'] = msgheader[msgheader.find('comment=')+8:] + mycontext['entry']

    elif msgheader.startswith( 'ELECTIONMESSAGE' ):
      print "got ELECTIONMESSAGE from IP:%s Port:%s \n%s\n" %(ip, str(port), msgheader)
      stopcomm(thiscommhandle)
      electionmessage = msgheader[msgheader.find('comment=')+8:]
      firstvesselid = electionmessage[:electionmessage.find('+')]
      
      # Check if election message was sent by me, if so send election result.
      # Otherwise append my id to election message and send to next vessel.
      if firstvesselid == mycontext['myuniqueid']:
        send_election_result(electionmessage)
      else:
        send_election_message(find_neighbour_vessel(), 
          msgheader + mycontext['myuniqueid'] + '+')
        
    elif msgheader.startswith( 'ELECTIONRESULT' ):
      print "got ELECTIONRESULT from from IP:%s Port:%s \n%s\n" %(ip, str(port), msgheader)
      stopcomm(thiscommhandle)

      electionresult = msgheader[msgheader.find('comment=')+8:]
      
      # Finds the corresponding id with ip & port and set the current leader.
      index = find_vessel_with_id(electionresult)
      mycontext['currentleader'] = (mycontext['vessels'][index][0], 
        mycontext['vessels'][index][1])
      print("Assigned leader, IP: " +  mycontext['currentleader'][0] + " Port: " + str(mycontext['currentleader'][1]) + "\n")

      # If we sent the election result, exit thread.
      if msgheader[msgheader.find('sender=')+7:msgheader.find('\ncomment=')] == mycontext['myuniqueid']:
        print("Entered returned")
        return

      send_election_message(find_neighbour_vessel(), msgheader)

    elif msgheader.startswith( 'PERMISSIONDENIED' ):
      print "got PERMISSIONDENIED from leader\n"
      stopcomm(thiscommhandle)
      mycontext['distributedaccess'] = False
    elif msgheader.startswith( 'PERMISSIONGRANTED' ):
      print "got PERMISSIONGRANTED from leader\n"
      stopcomm(thiscommhandle)
      mycontext['distributedaccess'] = True
    elif msgheader.startswith( 'ACQUIRE' ):
      print "got ACQUIRE request from IP:%s Port:%s \n" %(ip, str(port))
      stopcomm(thiscommhandle) 
      vesselid = msgheader[msgheader.find('comment=')+8:]
      mycontext['leaderqueue'].append(vesselid)
      leaderlockresult = mycontext['leaderlock'].acquire()

      index = find_vessel_with_id(vesselid)
      sockobjVessel = openconn(mycontext['vessels'][index][0], mycontext['vessels'][index][1])
      if leaderlockresult:
        print("Sending permission granted\n")   
        sockobjVessel.send("PERMISSIONGRANTED\n")          
      else:
        print("Sending permission denied\n")
        sockobjVessel.send("PERMISSIONDENIED\n")
      sockobjVessel.close()

    elif msgheader.startswith( 'RELEASE' ):
      print "got RELEASE from IP:%s Port:%s \n" %(ip, str(port))
      mycontext['leaderqueue'].pop(0)
      if len(mycontext['leaderqueue']) > 0:
        index = find_vessel_with_id(mycontext['leaderqueue'][0])
        sockobjVessel = openconn(mycontext['vessels'][index][0], mycontext['vessels'][index][1])
        sockobjVessel.send("PERMISSIONGRANTED\n")
        sockobjVessel.close()
      else:
        mycontext['leaderlock'].release()
      
    else:
      print "got something:\n", msgheader
      stopcomm(thiscommhandle)
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    #pass

# ------------------------------------------------------------------------------
# Sends new entry to all other vessels 
# ------------------------------------------------------------------------------   
def send_vessel_data(entry):
  for (vesselip, vesselport) in mycontext['vessels']:
    if vesselip != mycontext['ip'] or vesselport != mycontext['port']:
      try:
        sockobjVessel = openconn(vesselip, vesselport)
        bytesent = sockobjVessel.send('VESSELDATA\ncomment=' + entry)
        sockobjVessel.close()
      except Exception, e:
        print "Exception in send_vessel_data: %s, %s\n" %(type(e), e)
        print "for IP: %s & Port: %s Continues with next vessel\n" %(vesselip, vesselport)
  return

# ------------------------------------------------------------------------------
# Sends new html page to client 
# ------------------------------------------------------------------------------   
def send_html(sockobj):
  htmlresponse = generate_html_page()
  sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
  "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
  return

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# Optional parameters are message and error which are introduced as headers into the html.
# ------------------------------------------------------------------------------   
def generate_html_page(status=""):
  #Initialize blackboard content
  content = '<div class="entry">%s</div>' %( mycontext['entry'] )
  
  # dynamic title showing Ip address, port and up time.
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))  

  leader = '<div class="leader">Current leader IP: %s Port: %s</div>' %( mycontext['currentleader'][0], mycontext['currentleader'][1] )

  # merging the contents of the board with the title
  # and wrapping all with <div id="boardcontents_placeholder”>...</div>
  content = '<div id="boardcontents_placeholder">%s%s%s</div>' %(leader, board_title, content)   

  status_message = "<div class='status'>%s</div>" % (status)
  content = "".join([mycontext['headerhtml'], status_message, content, mycontext['footerhtml']])

  return content

def find_vessel_with_id(vesselid):
  index = 0
  while vesselid != mycontext['vessels'][index][0].replace('.', '') + str(mycontext['vessels'][index][1]):
    index += 1
  return index

def start_elect_leader():
  print("Staring Election\n")
  mycontext['leaderelectionrunning'] = True 
  send_election_message(find_neighbour_vessel(), 
    "ELECTIONMESSAGE\ncomment=" + mycontext['myuniqueid'] + '+') 
  return

def send_election_message(index, message):
  try:
    (vesselip, vesselport) = mycontext['vessels'][index]
    sockobjVessel = openconn(vesselip, vesselport)
    sockobjVessel.send(message)
    sockobjVessel.close()
  except Exception, e:
    send_election_message(index + 1, message)
  return

def send_election_result(message):
  largestid = 0
  activevessels = message.split('+')
  activevessels = activevessels[:-1]

  for vessel in activevessels:
    if largestid < int(vessel):
      largestid = int(vessel)

  send_election_message(find_neighbour_vessel(), 
    "ELECTIONRESULT\nsender=" + mycontext['myuniqueid'] + "\ncomment=" + str(largestid))

  mycontext['leaderelectionrunning'] = False 
  return

def find_neighbour_vessel():
  # Finds the next vessel in ring
  index = 0
  while (mycontext['ip'], mycontext['port']) != mycontext['vessels'][index]:
    index += 1
  index += 1
  if len(mycontext['vessels']) >= index:
    index = 0
  return index

def acquire_distributed_lock():
  sockobjVessel = openconn(mycontext['currentleader'][0], mycontext['currentleader'][1])
  sockobjVessel.send("ACQUIRE\ncomment=" + mycontext['myuniqueid'])
  sockobjVessel.close()
  
  # Ugly
  while not mycontext['distributedaccess']:
    sleep(0.01)
  return

def release_distributed_lock():
  sockobjVessel = openconn(mycontext['currentleader'][0], mycontext['currentleader'][1])
  sockobjVessel.send("RELEASE\n")
  sockobjVessel.close()  
  return

# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default main.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  # Initialize mycontext
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['vessels'] = [('127.0.0.1', 63100), ('127.0.0.1', 63101)]
  mycontext['entry'] = ''
  mycontext['lock'] = getlock()
  mycontext['leaderelectionrunning'] = True
  mycontext['currentleader'] = ()
  mycontext['distributedaccess'] = False
  mycontext['leaderqueue'] = []
  mycontext['leaderlock'] = getlock()
  mycontext['myuniqueid'] = ip.replace('.', '') + str(port)
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  settimer(0, start_elect_leader, ())
  start_board()
