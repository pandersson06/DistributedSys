# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  while True:
    try: 
      listencommhandle = waitforconn(ip,port,board)
    except Exception, e:
      print "Exception in start_board: %s, %s\n" %(type(e), e)
      print "Will try again"
      #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    # React depending on message type: HTTP GET, or POST, or VESSELDATA,
    # or some other type of communication.
    if msgheader.startswith( 'GET' ):
      send_html(sockobj)
      stopcomm(thiscommhandle)   
    elif msgheader.startswith( 'POST' ):
      print "Vessel IP: %s Port: %s " %(mycontext['ip'], mycontext['port'])
      print "got POST:\n", msgheader
      newentry = msgheader[msgheader.find('comment=')+8:] + '<br>'
      mycontext['entry'] = newentry + mycontext['entry']

      send_html(sockobj)
      stopcomm(thiscommhandle)

      send_vessel_data(newentry)
    elif msgheader.startswith( 'VESSELDATA' ):
      print "Vessel IP:%s Port:%s got:%s" %(mycontext['ip'], mycontext['port'], msgheader)
      mycontext['entry'] = msgheader[msgheader.find('comment=')+8:] + mycontext['entry']
      stopcomm(thiscommhandle)
    else:
      print "got something:\n", msgheader
      stopcomm(thiscommhandle)
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    #raise
    #pass

# ------------------------------------------------------------------------------
# Sends new entry to all other vessels 
# ------------------------------------------------------------------------------   
def send_vessel_data(entry):
  for (vesselip, vesselport) in mycontext['vessels']:
    if vesselip != mycontext['ip'] or vesselport != mycontext['port']:
      try:
        sockobjVessel = openconn(vesselip, vesselport)
        bytesent = sockobjVessel.send('VESSELDATA\ncomment=' + entry)
        sockobjVessel.close()
      except Exception, e:
        print "Exception in send_vessel_data: %s, %s\n" %(type(e), e)
        print "for IP: %s & Port: %s Continues with next vessel\n" %(vesselip, vesselport)
  return

# ------------------------------------------------------------------------------
# Sends new html page to client 
# ------------------------------------------------------------------------------   
def send_html(sockobj):
  htmlresponse = generate_html_page()
  sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
  "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
  return

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# Optional parameters are message and error which are introduced as headers into the html.
# ------------------------------------------------------------------------------   
def generate_html_page(status=""):
  #Initialize blackboard content
  
  # one sample entry
  entry = mycontext['entry']
  content ='<div class="entry">%s</div>' %( entry )
  
  # dynamic title showing Ip address, port and up time.
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))  

  # merging the contents of the board with the title
  # and wrapping all with <div id="boardcontents_placeholder”>...</div>
  content = '<div id="boardcontents_placeholder">%s%s</div>' %(board_title, content)   

  # An optional status message
  status_message = "<div class='status'>%s</div>" % (status)

  #Concatenate strings into huge string representing the final html
  content = "".join([mycontext['headerhtml'], status_message, content, mycontext['footerhtml']])
  
  #print content
  return content
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default main.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  # Initialize mycontext
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['vessels'] = [('127.0.0.1', 63100), ('127.0.0.1', 63101), ('127.0.0.1', 63102), ('127.0.0.1', 63103), ('127.0.0.1', 63104), ('127.0.0.1', 63105), ('127.0.0.1', 63106), ('127.0.0.1', 63107)]
  mycontext['entry'] = ""
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  start_board()
