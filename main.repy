
# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------  
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port) + "\n"
  while True:
    try: 
      listencommhandle = waitforconn(ip,port,board)
    except Exception, e:
      print "Exception in start_board: %s, %s\n" %(type(e), e)
      print "Will try again"

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    # React depending on message type: GET, POST, VESSELDATA, 
    # or some other type of communication.
    if msgheader.startswith( 'GET' ):
      generate_and_send_html_page(sockobj)
      stopcomm(thiscommhandle)   

    elif msgheader.startswith( 'POST' ):
      print "got POST %s" %(msgheader)
      newEntry =  msgheader[msgheader.find('comment=')+8:] + '<br>'
      mycontext['entry'] = newEntry + mycontext['entry']
      generate_and_send_html_page(sockobj)
      stopcomm(thiscommhandle)
      
      mycontext['lock'].acquire(True)
      send_vessel_data(newEntry)
      mycontext['lock'].release()  
   
    elif msgheader.startswith( 'VESSELDATA' ):
      print "got VESSELDATA from IP:%s got:%s" %(ip, msgheader)
      stopcomm(thiscommhandle)      
      mycontext['entry'] = msgheader[msgheader.find('comment=')+8:] + mycontext['entry']

    else:
      print "got something:\n", msgheader
      stopcomm(thiscommhandle)
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)

# ------------------------------------------------------------------------------
# Sends new entry to all other vessels 
# ------------------------------------------------------------------------------   
def send_vessel_data(entry):
  for (vesselip, vesselport) in mycontext['vessels']:
    if vesselip != mycontext['ip'] or vesselport != mycontext['port']:
      try:
        sockobjVessel = openconn(vesselip, vesselport)
        bytesent = sockobjVessel.send('VESSELDATA\ncomment=' + entry)
        sockobjVessel.close()
      except Exception, e:
        print "Exception in send_vessel_data: %s, %s\n" %(type(e), e)
        print "for IP: %s & Port: %s Continues with next vessel\n" %(vesselip, vesselport)
  return

# ------------------------------------------------------------------------------
# Generates the html page and sends it to client
# Optional parameters are message and error which are introduced as headers into the html.
# ------------------------------------------------------------------------------   
def generate_and_send_html_page(sockobj, status=""):
  # Sets blackboard, title, and status content
  content = '<div class="entry">%s</div>' %( mycontext['entry'] )
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))
  status_message = "<div class='status'>%s</div>" % (status)

  # Merging the contents of the blackboard, the title and the leader within a placeholder
  content = '<div id="boardcontents_placeholder">%s%s</div>' %(board_title, content)   

  # Merging the htmlfiles, status and blackboard content.
  content = "".join([mycontext['headerhtml'], status_message, content, mycontext['footerhtml']])

  # Sends the generated html
  sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
  "Content-length: %i\r\n\r\n%s" % (len(content), content))
  return

# ------------------------------------------------------------------------------
# Finds the corresponding vessel index for a vesselid 
# ------------------------------------------------------------------------------ 
def find_vessel_with_id(vesselid):
  index = 0
  while vesselid != mycontext['vessels'][index][0].replace('.', '') + str(mycontext['vessels'][index][1]):
    index += 1
  return index

# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default main.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  # Initialize mycontext
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['vessels'] = [('127.0.0.1', 63100), ('127.0.0.1', 63101),  ('127.0.0.1', 63102),  ('127.0.0.1', 63103)]
  mycontext['entry'] = ''
  mycontext['lock'] = getlock()
  mycontext['myuniqueid'] = ip.replace('.', '') + str(port)
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  start_board()
